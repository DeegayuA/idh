#include "Arduino.h"
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <Fonts/FreeSans12pt7b.h>
#include <ESPmDNS.h>
#include <OneButton.h>  // Include the OneButton library

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'Untitled-1', 128x64px
const unsigned char edic_Untitled_1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00,
  0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x0f, 0xff, 0x20, 0x00,
  0x00, 0x07, 0xff, 0xff, 0x8f, 0xff, 0xf0, 0x03, 0xc0, 0x3f, 0xfc, 0x00, 0x18, 0x03, 0x20, 0x00,
  0x00, 0x07, 0xff, 0xff, 0x1f, 0xff, 0xfc, 0x07, 0x80, 0xff, 0xff, 0x00, 0x30, 0x01, 0xe0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0xc0,
  0x00, 0x0e, 0x00, 0x00, 0x1c, 0x00, 0x1f, 0x07, 0x87, 0xc0, 0x00, 0x7f, 0x80, 0x03, 0xff, 0xe0,
  0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x1f, 0x0f, 0x1f, 0x80, 0x00, 0xf8, 0x00, 0x0f, 0xff, 0xe0,
  0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x0f, 0x8f, 0x1e, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x01, 0xc0,
  0x00, 0x1e, 0x00, 0x00, 0x3c, 0x00, 0x07, 0x8f, 0x3c, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00,
  0x00, 0x3c, 0x7f, 0xf0, 0x7c, 0x00, 0x07, 0x8e, 0x78, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
  0x00, 0x3c, 0x7f, 0xf0, 0x78, 0x00, 0x07, 0x9e, 0x79, 0xe3, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
  0x00, 0x3c, 0xff, 0xf0, 0x78, 0x00, 0x07, 0x9e, 0x71, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3c, 0x00, 0x00, 0x78, 0x00, 0x0f, 0x1e, 0x71, 0x20, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x78, 0x00, 0x00, 0xf0, 0x00, 0x0f, 0x3c, 0xf0, 0xc0, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x78, 0x00, 0x00, 0xf0, 0x00, 0x1e, 0x3c, 0x78, 0x00, 0x04, 0x7f, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x78, 0x00, 0x00, 0xf0, 0x00, 0x3c, 0x3c, 0x78, 0x00, 0x0e, 0x00, 0x0f, 0xfc, 0x00, 0x00,
  0x00, 0x78, 0x00, 0x00, 0xe0, 0x00, 0xf8, 0x3c, 0x7c, 0x00, 0x3e, 0x00, 0x0c, 0x0c, 0x38, 0x00,
  0x00, 0xf0, 0x00, 0x01, 0xe0, 0x07, 0xf0, 0x78, 0x3f, 0x01, 0xfc, 0x00, 0x04, 0x00, 0x4c, 0x00,
  0x00, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xe0, 0x78, 0x1f, 0xff, 0xf8, 0x00, 0x07, 0xff, 0xc4, 0x00,
  0x00, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0x78, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x68, 0x00,
  0x00, 0xff, 0xff, 0xe3, 0xff, 0xfc, 0x00, 0xf8, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x01, 0xc4, 0x11, 0x00, 0x30, 0x05, 0x00, 0x41, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x04, 0x42, 0x04, 0x81, 0x10, 0x01, 0x00, 0x11, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x1f, 0x87, 0x0f, 0xc0, 0x83, 0x18, 0x03, 0x18, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x10, 0x00, 0x00, 0x18, 0x8d, 0x8c, 0x01, 0x83, 0x18, 0x03, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x19, 0xc7, 0xc0, 0x18, 0x8d, 0x08, 0x01, 0x02, 0x18, 0xe2, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x1b, 0x66, 0x40, 0x10, 0x8e, 0x08, 0x01, 0x02, 0x13, 0x33, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x12, 0x24, 0x60, 0x11, 0x9e, 0x0f, 0x81, 0x06, 0x12, 0x33, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x17, 0xec, 0x40, 0x1f, 0x16, 0x98, 0x01, 0x06, 0x36, 0x37, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x06, 0x36, 0x0c, 0x40, 0x30, 0x33, 0x98, 0x01, 0x06, 0x36, 0x26, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x04, 0x26, 0x4c, 0xd8, 0x30, 0x33, 0x98, 0x02, 0x06, 0x22, 0x66, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xc3, 0x8f, 0x98, 0x30, 0x1e, 0x9f, 0x82, 0x03, 0xc3, 0xc4, 0x30, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'kelani logo', 128x64px
const unsigned char epd_bitmap_kelani_logo[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x3f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x80, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x47, 0x20, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0a, 0xc0, 0x76, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x0a, 0x36, 0x00, 0x07, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x8f, 0xff, 0xff, 0xf2, 0x00, 0x00, 0x00, 0x1c, 0x78, 0x06, 0x01, 0x83, 0x80, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x28, 0x40, 0xdf, 0xb0, 0x51, 0x40, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xf9, 0xfc, 0x00, 0x00, 0x00, 0x53, 0x83, 0xc4, 0xbc, 0x3c, 0xe0, 0x00,
  0x00, 0x00, 0xff, 0xff, 0xf8, 0xfe, 0x00, 0x00, 0x00, 0xe1, 0x0e, 0x39, 0xd6, 0x18, 0x20, 0x00,
  0x00, 0x01, 0xff, 0xff, 0xfe, 0x3f, 0x00, 0x00, 0x00, 0xc0, 0x05, 0x79, 0xe2, 0x80, 0x50, 0x00,
  0x00, 0x01, 0xff, 0x80, 0x7e, 0x1b, 0x80, 0x00, 0x01, 0x40, 0x72, 0x3f, 0xc4, 0xc0, 0x28, 0x00,
  0x00, 0x03, 0xf8, 0x00, 0x0f, 0x09, 0x80, 0x00, 0x02, 0x90, 0xff, 0xff, 0xf7, 0xe1, 0x98, 0x00,
  0x00, 0x07, 0xe0, 0x00, 0x01, 0x85, 0xc0, 0x00, 0x03, 0x01, 0x8b, 0xf0, 0xfb, 0x30, 0x1c, 0x00,
  0x00, 0x07, 0xc0, 0x00, 0x00, 0x80, 0xe0, 0x00, 0x07, 0x01, 0xa7, 0x00, 0x0e, 0x50, 0x04, 0x00,
  0x00, 0x0f, 0x00, 0x02, 0x20, 0x00, 0x60, 0x00, 0x04, 0x00, 0x6d, 0x06, 0x4b, 0x50, 0x0a, 0x00,
  0x00, 0x0e, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x04, 0x03, 0x58, 0x29, 0x49, 0xec, 0x26, 0x00,
  0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x86, 0xb1, 0x3f, 0xc8, 0xb4, 0x66, 0x00,
  0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc5, 0xb9, 0x70, 0xed, 0xc2, 0x03, 0x00,
  0x00, 0x18, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x0c, 0x8c, 0x60, 0xd0, 0xa0, 0x53, 0x23, 0x00,
  0x00, 0x10, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x04, 0x0d, 0xc1, 0x89, 0x98, 0x7a, 0x01, 0x00,
  0x00, 0x10, 0x00, 0x41, 0x41, 0x00, 0x00, 0x00, 0x0d, 0x05, 0xe7, 0x0f, 0x0e, 0x68, 0x11, 0x00,
  0x00, 0x10, 0x00, 0x20, 0x82, 0x00, 0x08, 0x00, 0x18, 0x93, 0xe3, 0xdf, 0xbc, 0x6d, 0x31, 0x00,
  0x00, 0x80, 0x00, 0x30, 0x04, 0x00, 0x08, 0x00, 0x18, 0x9b, 0xc6, 0x7f, 0xe6, 0xbf, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x18, 0x08, 0x00, 0x08, 0x00, 0x18, 0x15, 0x9a, 0x38, 0xc5, 0x15, 0x11, 0x00,
  0x00, 0x00, 0x02, 0x8c, 0x18, 0x00, 0x08, 0x00, 0x19, 0x15, 0x8a, 0x38, 0xc5, 0x15, 0x01, 0x00,
  0x00, 0x80, 0x02, 0x86, 0x20, 0x00, 0x18, 0x00, 0x19, 0xdb, 0xc6, 0x7b, 0xe6, 0xbf, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x81, 0xc0, 0x00, 0x10, 0x00, 0x19, 0x93, 0xe3, 0xdf, 0xbc, 0x6d, 0x21, 0x00,
  0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x30, 0x00, 0x0c, 0x05, 0xe7, 0x0f, 0x0e, 0x68, 0x31, 0x00,
  0x00, 0x00, 0x00, 0x30, 0x80, 0x00, 0x70, 0x00, 0x04, 0x0d, 0xc1, 0x89, 0x98, 0x7a, 0x01, 0x00,
  0x00, 0x10, 0x00, 0x0f, 0x80, 0x00, 0x70, 0x00, 0x0c, 0x8c, 0x60, 0xd0, 0xa0, 0x53, 0x33, 0x00,
  0x00, 0x4c, 0x00, 0x00, 0xe0, 0x00, 0xf0, 0x00, 0x08, 0x05, 0x39, 0x70, 0xed, 0xc2, 0x03, 0x00,
  0x00, 0x4e, 0x00, 0x00, 0x90, 0x03, 0xe4, 0x00, 0x0a, 0x06, 0xb1, 0x3f, 0xc8, 0xb6, 0x46, 0x00,
  0x00, 0x06, 0x43, 0x00, 0x88, 0x07, 0xe0, 0x00, 0x04, 0x53, 0x58, 0x29, 0x49, 0xec, 0x66, 0x00,
  0x00, 0x07, 0x63, 0x80, 0x48, 0x1f, 0xc0, 0x00, 0x04, 0x42, 0x6d, 0x06, 0x4b, 0x50, 0x8a, 0x00,
  0x00, 0x03, 0xb1, 0xf0, 0x00, 0x7f, 0x80, 0x00, 0x07, 0x21, 0xa7, 0x00, 0x0e, 0x50, 0x84, 0x00,
  0x00, 0x13, 0xf8, 0xff, 0x27, 0xff, 0x90, 0x00, 0x03, 0x31, 0x8b, 0xf0, 0xfb, 0x30, 0x14, 0x00,
  0x00, 0x01, 0xfc, 0x7f, 0xff, 0xff, 0x20, 0x00, 0x02, 0x80, 0xdf, 0xf9, 0xf7, 0xe1, 0x18, 0x00,
  0x00, 0x00, 0xfe, 0x3f, 0xff, 0xfe, 0x00, 0x00, 0x01, 0x48, 0x72, 0x3f, 0xc4, 0xc2, 0x28, 0x00,
  0x00, 0x00, 0x7f, 0xbf, 0xff, 0xfc, 0x00, 0x00, 0x00, 0xc3, 0x21, 0x79, 0xe2, 0x80, 0x50, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0xe6, 0x0e, 0x39, 0xd6, 0x0c, 0x20, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x51, 0x07, 0xc4, 0x3c, 0x38, 0xe0, 0x00,
  0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x29, 0x00, 0xdf, 0xb0, 0x71, 0x40, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x70, 0x0e, 0x00, 0x42, 0x80, 0x00,
  0x00, 0x00, 0x08, 0x3f, 0xf8, 0x20, 0x00, 0x00, 0x00, 0x0a, 0x1c, 0x00, 0x03, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x5e, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x81, 0x86, 0x40, 0x38, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x04, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 0xf0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x03, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x3f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



const char *debugSsid = "EDIC 2";        // Debug WiFi SSID
const char *debugPassword = "00000000";  // Debug WiFi Password
// String serverIPAddress = "192.168.137.224";
String serverIPAddress = "172.16.21.27";

WebSocketsServer webSocket = WebSocketsServer(81);

// Button Pins
#define BUTTON_FORWARD_PIN 13
#define BUTTON_BACKWARD_PIN 12
#define BUTTON_PRESS_PIN 14
#define BUZZER_PIN 4 

// RGB LED Pins
const int LED_PIN_RED = 32;
const int LED_PIN_GREEN = 33;
const int LED_PIN_BLUE = 26;

bool pcConnected = false;

String doctorNames[10];
String doctorColors[10];
int numDoctors = 0;
int currentDoctorIndex = 0;

// Initialize OneButton instances for each button
OneButton forwardButton(BUTTON_FORWARD_PIN, true);
OneButton backwardButton(BUTTON_BACKWARD_PIN, true);
OneButton pressButton(BUTTON_PRESS_PIN, true);

void setup() {
  pinMode(LED_PIN_RED, OUTPUT);
  pinMode(LED_PIN_GREEN, OUTPUT);
  pinMode(LED_PIN_BLUE, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT); 

  Serial.begin(115200);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
   // System power-on sound
  soundPowerOn();

  showFullScreenMessage("Developed by");
  delay(2000);

  // Display the first bitmap (edic_Untitled_1)
  showFullScreenBitmap(edic_Untitled_1);
  delay(2000);  // Hold for 2 seconds

  // Display the second bitmap (epd_bitmap_kelani_logo)
  showFullScreenBitmap(epd_bitmap_kelani_logo);
  delay(2000);  // Hold for 2 seconds

  showFullScreenMessage("Ready to Connect");
  delay(2000);

  // Connect to the debug WiFi network
  WiFi.begin(debugSsid, debugPassword);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected to WiFi. IP address: ");
  Serial.println(WiFi.localIP());

  // Start mDNS service
  if (!MDNS.begin("IDHQ_by_EDIC")) {
    Serial.println("Error setting up MDNS responder!");
    while (1) {
      delay(1000);
    }
  }
  Serial.println("mDNS responder started");

  fetchDoctorData();

  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  // Attach the callback functions for single and double presses
  forwardButton.attachClick(handleForwardButton);
  backwardButton.attachClick(handleBackwardButton);
  pressButton.attachClick(handleSinglePress);
  pressButton.attachDoubleClick(handleDoublePress);
}


void loop() {
  webSocket.loop();

  forwardButton.tick();   // Handle the forward button events
  backwardButton.tick();  // Handle the backward button events
  pressButton.tick();     // Handle the press button events

  delay(10);
}

void handleForwardButton() {
  soundButtonPress();
  currentDoctorIndex = (currentDoctorIndex + 1) % numDoctors;
  Serial.print("Incremented Doctor Index: ");
  Serial.println(currentDoctorIndex);
  showFullScreenMessage(doctorNames[currentDoctorIndex].c_str());
  setColor(doctorColors[currentDoctorIndex].c_str());
  

}

void handleBackwardButton() {
  soundButtonPress();
  currentDoctorIndex = (currentDoctorIndex - 1 + numDoctors) % numDoctors;
  Serial.print("Decremented Doctor Index: ");
  Serial.println(currentDoctorIndex);
  showFullScreenMessage(doctorNames[currentDoctorIndex].c_str());
  setColor(doctorColors[currentDoctorIndex].c_str());
  

}

void handleSinglePress() {
  Serial.println("Single press detected");
  blinkLED(1, 500);
  soundSingleClick();
  webSocket.broadcastTXT("{\"action\": \"notify\", \"press\": \"single\", \"doctorRoomNumber\": " + String(currentDoctorIndex + 1) + "}");
   
}

void handleDoublePress() {
  Serial.println("Double press detected");
  blinkLED(2, 300);
  soundDoubleClick();
  webSocket.broadcastTXT("{\"action\": \"next\", \"press\": \"double\", \"doctorRoomNumber\": " + String(currentDoctorIndex + 1) + "}");
   
}

void soundPowerOn() {
  tone(BUZZER_PIN, 1000, 500);  // 1000 Hz tone for 500 ms
  delay(500);
}

void soundButtonPress() {
  tone(BUZZER_PIN, 1500, 300);  // 1500 Hz tone for 300 ms
}

void soundSingleClick() {
  tone(BUZZER_PIN, 2000, 300);  // 2000 Hz tone for 300 ms
}

void soundDoubleClick() {
  tone(BUZZER_PIN, 1000, 200);  // 1000 Hz tone for 200 ms
  delay(200);
  tone(BUZZER_PIN, 1000, 200);  // 1000 Hz tone for 200 ms
}

void noToneBuzzer() {
  noTone(BUZZER_PIN);
}

void blinkLED(int times, int delayTime) {
  for (int i = 0; i < times; i++) {
    digitalWrite(LED_PIN_RED, HIGH);
    digitalWrite(LED_PIN_GREEN, HIGH);
    digitalWrite(LED_PIN_BLUE, HIGH);
    delay(delayTime);
    digitalWrite(LED_PIN_RED, LOW);
    digitalWrite(LED_PIN_GREEN, LOW);
    digitalWrite(LED_PIN_BLUE, LOW);
    delay(delayTime);
  }
}

void showFullScreenBitmap(const uint8_t *bitmap) {
  display.clearDisplay();
  display.drawBitmap(0, 0, bitmap, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  display.display();
}

void displayCenteredText(const String &text, int yPosition, int textSize) {
  display.setTextSize(textSize);
  display.setTextColor(SSD1306_WHITE);
  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(text, 0, 0, &x1, &y1, &w, &h);
  int xPosition = (SCREEN_WIDTH - w) / 2;
  display.setCursor(xPosition, yPosition);
  display.println(text);
}

void showFullScreenMessage(const char *message) {
  display.clearDisplay();
  display.setFont(&FreeSans12pt7b);
  display.setTextColor(SSD1306_WHITE);

  // Break message into lines
  String msg = String(message);
  String line;
  int16_t x = 0, y = 0;
  uint16_t w, h;

  // Get text bounds for each line
  for (int i = 0; i < msg.length(); i++) {
    line += msg[i];
    display.getTextBounds(line.c_str(), 0, 0, &x, &y, &w, &h);

    if (w > SCREEN_WIDTH) {
      // Remove last character and display current line
      line.remove(line.length() - 1);
      display.setCursor((SCREEN_WIDTH - w) / 2, y + h);
      display.println(line);
      line = msg[i];  // Start new line with the current character

      // Move cursor to next line
      y += h;
      if (y + h > SCREEN_HEIGHT) {
        // If we run out of vertical space, clear display and reset y
        display.clearDisplay();
        y = 0;
      }
    }
  }

  // Display remaining text in last line
  if (line.length() > 0) {
    display.setCursor((SCREEN_WIDTH - w) / 2, y + h);
    display.println(line);
  }

  display.display();
}

void fetchDoctorData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://" + String(serverIPAddress) + "/idh.github.io/doctorlist/doc_list.php";
    Serial.println(url);
    http.begin(url);
    Serial.println("HTTP GET request started");
    int httpResponseCode = http.GET();
    Serial.printf("HTTP Response code: %d\n", httpResponseCode);

    if (httpResponseCode == 200) {
      String payload = http.getString();
      Serial.println("HTTP GET request successful");
      Serial.println("Payload: " + payload);
      DynamicJsonDocument doc(2048);
      DeserializationError error = deserializeJson(doc, payload);

      if (error) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return;
      }

      numDoctors = doc["data"].size();
      for (int i = 0; i < numDoctors; i++) {
        doctorNames[i] = doc["data"][i]["name"].as<String>();
        doctorColors[i] = doc["data"][i]["color"].as<String>();
      }

      showFullScreenMessage("System Ready");
      delay(2000);

      currentDoctorIndex = 0;
      showFullScreenMessage(doctorNames[currentDoctorIndex].c_str());
      setColor(doctorColors[currentDoctorIndex].c_str());

    } else {
      Serial.printf("HTTP GET request failed: %d\n", httpResponseCode);
      showFullScreenMessage("No web connection");
    }

    http.end();
  } else {
    Serial.println("WiFi not connected");
  }
}

void setColor(const char *color) {
  int red = 255, green = 255, blue = 255;  // Default to white

  if (color[0] == '#' && strlen(color) == 7) {
    // Parse the hex color code
    unsigned long colorValue = strtoul(color + 1, NULL, 16);
    red = (colorValue >> 16) & 0xFF;
    green = (colorValue >> 8) & 0xFF;
    blue = colorValue & 0xFF;
  } else {
    Serial.println("Invalid color format");
    return;  // Exit if the format is invalid
  }

  // Normalize and scale factors to enhance the color intensity
  float scale = 1.85;  // Increase this value to make colors more vivid

  // Calculate scaled values
  int scaledRed = constrain((int)(red * scale), 255, 0);
  int scaledGreen = constrain((int)(green * scale), 255, 0);
  int scaledBlue = constrain((int)(blue * scale), 255, 0);

  // Invert the scaled values for common anode RGB LED
  int newRed = 255 - scaledRed;
  int newGreen = 255 - scaledGreen;
  int newBlue = 255 - scaledBlue;

  // Apply the color to the LED
  analogWrite(LED_PIN_RED, newRed);
  analogWrite(LED_PIN_GREEN, newGreen);
  analogWrite(LED_PIN_BLUE, newBlue);
}

void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("WebSocket Disconnected");
      break;
    case WStype_CONNECTED:
      Serial.println("WebSocket Connected");
      break;
    case WStype_TEXT:
      Serial.printf("WebSocket received text: %s\n", payload);
      break;
  }
}
